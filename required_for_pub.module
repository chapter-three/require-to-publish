<?php

/**
 * @file
 * Required for Publishing module.
 */

/**
 * Required state constants for fields.
 */
define('REQUIRED_FOR_PUB_NOT_REQUIRED', 0);
define('REQUIRED_FOR_PUB_REQUIRED', 1);
define('REQUIRED_FOR_PUB_REQUIRED_FOR_PUB', 2);

/**
 * Submit button values.
 */
define('REQUIRED_FOR_PUB_DRAFT_TRIGGER', 'required_for_pub_draft');
define('REQUIRED_FOR_PUB_PUBLISH_TRIGGER', 'required_for_pub_publish');

/**
 * Implements hook_help().
 */
function required_for_pub_help($path, $arg) {
  switch ($path) {
    case 'admin/help#required_for_pub':
      return t('Allows forms to be filled without required fields before publishing.');
  }
}

/**
 * Implements hook_field_info_alter().
 */
function required_for_pub_field_info_alter(&$info) {
  // Add the required_for_pub setting to all field types. Defaults
  // to NULL in order to preserve earlier "Required field" setting.
  foreach (array_keys($info) as $field_type) {
    $info[$field_type]['instance_settings']['required_for_pub'] = NULL;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function required_for_pub_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Hide the "Required field" checkbox. This functionality becomes
  // part of the required_for_pub field.
  $form['instance']['required']['#access'] = FALSE;

  // "Required for publishing" form element. Default value is taken
  // from the "Required field" setting if not set.
  $form['instance']['required_for_pub'] = array(
    '#type' => 'radios',
    '#title' => t('Required for publishing'),
    '#description' => t('"Required for publishing" allows the form to be saved in unpublished state without entering the required fields.'),
    '#default_value' => !isset($form['#instance']['required_for_pub']) ? (int) $form['#instance']['required'] : $form['#instance']['required_for_pub'],
    '#weight' => -9,
    '#options' => array(
      REQUIRED_FOR_PUB_NOT_REQUIRED => t('Not Required'),
      REQUIRED_FOR_PUB_REQUIRED => t('Required field'),
      REQUIRED_FOR_PUB_REQUIRED_FOR_PUB => t('Required for publishing'),
    ),
  );

  // Add custom validation handler.
  $form['#validate'][] = 'required_for_pub_validate_required_field_setting';
}

/**
 * Validation callback for field_ui_field_edit_form.
 */
function required_for_pub_validate_required_field_setting($form, &$form_state) {
  // Get selected "Required for publishing" state.
  $required_state = $form_state['values']['instance']['required_for_pub'];

  // Set appropriate value for the (now hidden) "Required field" option.
  $form_state['values']['instance']['required'] = ($required_state === REQUIRED_FOR_PUB_REQUIRED);
}

/**
 * Implements hook_permission().
 */
function required_for_pub_permission() {
  return array(
    'required_for_pub_save_draft' => array(
      'title' => t('Save content as draft'),
      'description' => t('Allows a user to save content as draft.'),
    ),
  );
}

/**
 * Implements hook_field_widget_form_alter().
 */
function required_for_pub_field_widget_form_alter(&$element, &$form_state, $context) {
  $instance = $context['instance'];
  $required_for_pub = isset($instance['required_for_pub']) ? $instance['required_for_pub'] : FALSE;

  if ($required_for_pub == REQUIRED_FOR_PUB_REQUIRED_FOR_PUB) {
    if (!user_access('required_for_pub_save_draft')) {
      // Require field if user has no access.
      $element['#required'] = TRUE;
    }

    // Flag to activate module.
    $form_state['required_for_pub'] = TRUE;

    // Add an after_build callback to handle fields required on publishing.
    $element['#after_build'][] = 'required_for_pub_field_widget_after_build';
  }
}

/**
 * After-build callback for "Required for publishing" fields.
 */
function required_for_pub_field_widget_after_build(&$element, &$form_state) {
  // If form is in validation limbo.
  if ($form_state['process_input'] && $form_state['triggering_element']['#name'] == REQUIRED_FOR_PUB_PUBLISH_TRIGGER) {
    // Blatantly stolen from field_collection module.
    // @see field_collection_field_widget_embed_validate()
    if (isset($element['#needs_validation'])) {
      $is_empty_multiple = (!count($element['#value']));
      $is_empty_string = (is_string($element['#value']) && drupal_strlen(trim($element['#value'])) == 0);
      $is_empty_value = ($element['#value'] === 0);
      $is_empty_option = (isset($element['#options']['_none']) && $element['#value'] == '_none');
      if ($is_empty_multiple || $is_empty_string || $is_empty_value || $is_empty_option) {
        if (isset($element['#title'])) {
          form_error($element, t('@name field is required before publishing.', array('@name' => $element['#title'])));
        }
        else {
          form_error($element);
        }
      }
    }
  }
  return $element;
}

/**
 * Implements hook_field_attach_form().
 */
function required_for_pub_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // Only invoke module for node entities and users with permission to save drafts.
  if (isset($form_state['required_for_pub'])) {
    drupal_add_css(drupal_get_path('module', 'required_for_pub') . '/css/required_for_pub.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }

  // Add a "Save as draft" action to the form.
  $form['actions']['required_for_pub_save_as_draft'] = array(
    '#type' => 'submit',
    '#access' => TRUE,
    '#value' => 'Save as draft',
    '#name' => REQUIRED_FOR_PUB_DRAFT_TRIGGER,
    '#weight' => 4,
    '#submit' => array(
      0 => 'node_form_submit',
    ),
  );

  // Change save button text to "Publish", add value for validation
  // condition.
  $form['actions']['submit']['#value'] = 'Publish';
  $form['actions']['submit']['#name'] = REQUIRED_FOR_PUB_PUBLISH_TRIGGER;

  // Add validation callback.
  $form['#validate'][] = 'required_for_pub_form_validate';
}

/**
 * Custom validation for the entity add or edit forms
 */
function required_for_pub_form_validate($form, &$form_state) {
  $trigger = $form_state['triggering_element']['#name'];

  // Enforce published state depending on triggering button.
  switch ($trigger) {
    case REQUIRED_FOR_PUB_DRAFT_TRIGGER:
      $form_state['values']['status'] = FALSE;
      break;

    case REQUIRED_FOR_PUB_PUBLISH_TRIGGER:
      $form_state['values']['status'] = TRUE;
      break;
  }
}

/**
 * special handler for fields of type "field collection"
 * For now: support is only for field collection fields up tp 1 level deep.
 * TODO: support for unlimited nesting of fields of type "field collection"
 */
function required_for_pub_fc_special_handler_form_alter(&$form, &$form_state, $field_name_fc = NULL, $field_tree = NULL) {
  $form['#rebuild'] = TRUE;
  $lang = $form[$field_name_fc]['#language'];
  $items = $form[$field_name_fc][$lang];

      $fields_fc = field_info_instances('field_collection_item', $field_name_fc);

      $form_state['required_for_pub']['#fields_instances'][] = $fields_fc;
      $fields_configured_as_req_for_pub = array();
      foreach ($fields_fc as $field_name2 => $field_arr) {

        if ($field_arr['required_for_pub'] == REQUIRED_FOR_PUB_REQUIRED_FOR_PUB) {
          $fields_required_for_pub[] = $field_name2;

          $form_state['required_for_pub']['#fields'][] = $field_name2;
          $fields_configured_as_req_for_pub[$field_name2] = $field_name2;
        }
      }

  $elements = element_children($items);
  foreach ($elements as $key => $item) {

    foreach (element_children($items[$key]) as $key2 => $field_name_fc2) {
      // if the field is not configured to be "required for pub", ignore
      if (!array_key_exists($field_name_fc2, $fields_configured_as_req_for_pub)) {
        continue;
      }

      $form_element = $items[$key][$field_name_fc2][$lang][0];

      $title = $form_element['#title'];

      if (empty($items[$key][$field_name_fc2][$lang][0]['value']) ) {
        $form[$field_name_fc][$lang][$key][$field_name_fc2][$lang][0]['#title'] = $title . '<div><span class="required-for-pub">*Required for content to be published.</span></div>';
      }
      else {
        $form[$field_name_fc][$lang][$key][$field_name_fc2][$lang][0]['value']['#title'] = $title . '<div><span class="required-for-pub">*Required for content to be published.</span></div>';
      }
      $form[$field_name_fc][$lang][$key][$field_name_fc2][$lang][0]['value']['#attributes']['class'][] = 'required-for-pub';
    }
  }
}