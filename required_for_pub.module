<?php

/**
 * Implements of hook_help().
 */
function required_for_pub_help($path, $arg) {
  switch ($path) {
    case 'admin/help#required_for_pub':
      return t('Allows forms to be filled without required fields before publishing.');
  }
}

/**
 * Implements hook_field_info_alter(&$info).
 */
function required_for_pub_field_info_alter(&$info) {
  // Add a setting to all field types.
  foreach ($info as $field_type => &$field_type_info) {
  $field_type_info += array('instance_settings' => array());
	$field_type_info['instance_settings'] += array(
      'required_for_pub' => false,
    );
  }
}

/**
 * Implements hook_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id).
 */
function required_for_pub_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  
  // omit field_collection 
  if ($form['#field']['type'] == 'field_collection') {
    return;
  }
  
  $form['instance']['required']['#access'] = FALSE;  // the 'Require field' form element will be handled by the form element below -- as one of the options.
  
  // user can now choose from 3 options: required, required_for_pub, or not required
  $form['instance']['required_for_pub'] = array(
    '#type' => 'radios',
    '#title' => t('Required for publishing'),
    '#description' => t('"Required for publishing" allows the form to be saved in unpublished state without entering the required fields.'),
    '#default_value' => empty($form['#instance']['required_for_pub']) ? NULL : $form['#instance']['required_for_pub'], 
    '#weight' => -9,
    '#options' => array(
      'not_required' => 'Not Required',
      'required' => 'Required field',
      'required_for_pub' => 'Required for publishing',
    ),  
  ); 
  
  $form['#validate'][] = '_required_for_pub_field_settings_validate';
}

/**
 * Custom validation for the field_ui_field_edit_form
 */
function _required_for_pub_field_settings_validate($form, &$form_state) {

  // choice can be  'required' or 'required_for_pub' or 'not_required'
  $choice = $form_state['values']['instance']['required_for_pub'];
  
  switch ($choice) {
    case 'required':
      $form_state['values']['instance']['required'] = 1;
      $form_state['values']['instance']['required_for_pub'] = 'required';
      break;
    case 'required_for_pub':
      $form_state['values']['instance']['required_for_pub'] = 'required_for_pub';
      $form_state['values']['instance']['required'] = 0;
      break;      
    case 'not_required':
      $form_state['values']['instance']['required_for_pub'] = 'not_required';
      $form_state['values']['instance']['required'] = 0;
      break;  
  }
  return TRUE;
}


/**
 * Implements hook_permission().
 */
function required_for_pub_permission() {
  return array(
    'required_for_pub_save_draft' => array(
      'title' => t('Save content as draft'),
      'description' => t('Allows a user to save content as draft.'),
    ),
  );
}

/**
 * Implements hook_field_attach_form()
 */
function required_for_pub_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode = NULL, $options = array()) {

  if (!user_access('required_for_pub_save_draft')) {
    return;
  }
  
  $form['#tree'] = false;  
  drupal_add_css(drupal_get_path('module', 'required_for_pub') . '/css/required_for_pub.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  $form['#validate'][] = 'required_for_pub_form_validate';
  
  // get all fields in the node form_state
  $fields = $form_state['field'];
  
  if ($entity_type == 'field_collection_item') {
    return;  // field collection items trigger for the hook_field_attach_form  to be called again. so need need to process it again.
  }
  
  if ($entity_type != 'node')  {
    return;
  }
  $form_state['required_for_pub']['#fields_instances'] = array();

  if ($entity_type == 'node') {
    $field_info_instances = field_info_instances($entity_type, $entity->type );
    $form_state['required_for_pub']['#fields_instances'][] = $field_info_instances;
  }
  
  $fields_required_for_pub = array(); 
  
  // important step: this will determine the fields that have been configured to be "required_for_pub" 
  foreach ($field_info_instances as $field_name => $field_arr) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'field_collection') {
      // we are on a field collection item so call this function to handle it
      required_for_pub_fc_special_handler_form_alter($form, $form_state, $field_name); 
    }
    if (empty($field_info_instances[$field_name]['required_for_pub'])) { // value can be 0 or NULL  
      continue;
    }
    if ( $field_info_instances[$field_name]['required_for_pub'] == 'required_for_pub' ) {  // create an array of fields where required_for_pub is  TRUE // TODO: no need for an if . already checked by isset 4 lines above
      $fields_required_for_pub[] = $field_name;   
      $form_state['required_for_pub']['#fields'][] = $field_name;
      // add css to the div wrapping the field
      $form[$field_name]['#attributes']['class'][] = 'required-for-pub'; 

    }
    
  }
  
  if (!empty($fields_required_for_pub)) {
    
    // gather all the field instances from the top all the way to the nested fields of type "field collection" 
    $fields_instances_temp = NULL;
    foreach ($form_state['required_for_pub']['#fields_instances'] as $key => $field_instance) {
      if (empty($fields_instances_temp)) {
        $fields_instances_temp = $field_instance;
      }
      else {
        $fields_instances_temp = array_merge($fields_instances_temp, $field_instance);
      }  
    }
    $form_state['required_for_pub']['#fields_instances'] = $fields_instances_temp;
  }
  
  // Save as draft button will only show up on content types and if the module 'save_draft' is not enabled.
  if ($entity_type == 'node' && !module_exists('save_draft') && !empty($fields_required_for_pub)) {
    $form['actions']['required_for_pub_save_as_draft'] = array(
      '#type' => 'submit',
      '#access' => true,
      '#default_value' => 'Save as draft',
      '#name' => 'required_for_pub_save_as_draft',
      '#weight' => 4,
      '#submit' => 
      array (
        0 => 'node_form_submit',
      ),
    );
    $form['actions']['submit']['#value'] = 'Publish'; 
    
    $form['actions']['submit']['#name'] = 'drupal_core_save';
    //$form['options']['status']['#access'] = FALSE;
  }
}


/**
 * Custom validation for the entity add or edit forms
 */
function required_for_pub_form_validate($form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'required_for_pub') . '/css/required_for_pub.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  $trigger = $form_state['triggering_element']['#name'];
  switch ($trigger) { 
    case 'required_for_pub_save_as_draft':
      $form_state['values']['status'] = 0;
      return TRUE;
      break;  
    case 'drupal_core_save':
      $form_state['values']['status'] = 1;
      break;      
  }
      
  // if there are no fields that have been configured as required for publish
  if (empty($form_state['required_for_pub']['#fields'])) {
    return TRUE;
  }

  $status = $form_state['values']['status'];
  $lang = $form_state['values']['language'];  
  $empty_fields = array();
  
  foreach ($form_state['required_for_pub']['#fields'] as $key => $field_name) {
    if (empty($form_state['values'][$field_name][$lang][0])) {
      $item = $form_state['values'][$field_name][$lang];  // some fields do not use any delta or the 0 offset. example: term reference does not use the 0 offset when the field is empty
    }
    else { 
      $item =  $form_state['values'][$field_name][$lang][0];
    }  
    // get the field info. Do not use field_get_fields -- it will harder to traverse the array for those fields nested in field collection
    $field = field_info_field($field_name);

    // get the module that defined the hook_field_is_empty
    $module = $field['module'];
    
    // get the field type
    $field_type = $field['type'];
    
    // get the function name which is in this format: called module_field_is_empty(), where module is the module that defined the field
    $func = $module.'_field_is_empty';
    
    // special handling for booleans
    // NOTE: the list.module's hook_field_is_empty specifies this: 
    // if (empty($item['value']) && (string) $item['value'] !== '0') { return TRUE; }
    // paramter $item passed is array('value' => 0) -- if user has not clicked the wdiget form
    // which means that the boolean field will always return hook_field_is_empty to be FALSE -- that is, the field contains data. when in fact, it should be treated as EMPTY.
    // hence, we convert the value from 0 to NULL or set $item to NULL
    if ($field_type == 'list_boolean') {
      if ($item['value'] == 0) {
        $item = NULL;
      }
    }
    
    // special handling for fields that do no use delta or the 0 offset.
    if (empty($item)) {
      $field_is_empty = TRUE;
    }
    else { 
      $field_is_empty = call_user_func($func, $item, $field);
    }
    
    // TO CHECK if field is empty -- this will account for all field types
    if ($field_is_empty) {
      $empty_fields[] = $field_name;
    }
  }
  
  // the most important validation
  $field_string = "";
  $digit = 1;
  if ($status == 1 && !empty($empty_fields) ) {
    // the form is cached. Hence, the css file must be loaded again in the validate function  or  the css wonk work.
    drupal_add_css(drupal_get_path('module', 'required_for_pub') . '/css/required_for_pub.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    if (module_exists('save_draft')) {
      form_set_error('required_for_pub', t('You must do "a" or "b": <p>a. Save this content as DRAFT</p> <p>b. Or PULBISH it but FILL UP "required fields for content to be published" listed below:</p>'));       
    }
    else {
    
      form_set_error('required_for_pub', t('You must do "a" or "b": <p>a. Save this content as DRAFT.</p> <p>b. Or PUBLISH it but FILL UP the "required fields for content to be published" listed below:</p>'));       
    }

    foreach ($empty_fields as $key => $field_name) {
      $field_string = $field_name;
      
      $label = $form_state['required_for_pub']['#fields_instances'][$field_name]['label'];
      form_set_error($field_name, t('%digit. %field_name', array('%field_name' => $label, '%digit' => $digit)));
      $digit = $digit + 1;
    }
    
    return FALSE;
    
  }
  else {
    return TRUE;
  }
  return FALSE;
}



/**
 * special handler for fields of type "field collection"
 * For now: support is only for field collection fields up tp 1 level deep.
 * TODO: support for unlimited nesting of fields of type "field collection"
 */
function required_for_pub_fc_special_handler_form_alter(&$form, &$form_state, $field_name_fc = NULL, $field_tree = NULL) {
  $form['#rebuild'] = TRUE;
  $lang = $form[$field_name_fc]['#language'];
  $items = $form[$field_name_fc][$lang];
  
      $fields_fc = field_info_instances('field_collection_item', $field_name_fc);
      
      $form_state['required_for_pub']['#fields_instances'][] = $fields_fc;
      $fields_configured_as_req_for_pub = array();
      foreach ($fields_fc as $field_name2 => $field_arr) {

        if ($field_arr['required_for_pub'] == 'required_for_pub') {
          $fields_required_for_pub[] = $field_name2;
          
          $form_state['required_for_pub']['#fields'][] = $field_name2;
          $fields_configured_as_req_for_pub[$field_name2] = $field_name2;
        }
      }  
  
  $elements = element_children($items);
  foreach ($elements as $key => $item) {
    
    foreach(element_children($items[$key]) as $key2 => $field_name_fc2) {
      // if the field is not configured to be "required for pub", ignore
      if (!array_key_exists($field_name_fc2, $fields_configured_as_req_for_pub)) {
        continue;
      }

      $form_element = $items[$key][$field_name_fc2][$lang][0];

      $title = $form_element['#title'];
      
      if (empty($items[$key][$field_name_fc2][$lang][0]['value']) ) {
        $form[$field_name_fc][$lang][$key][$field_name_fc2][$lang][0]['#title'] = $title.'<div><span class="required-for-pub">*Required for content to be published.</span></div>';
      }
      else {
        $form[$field_name_fc][$lang][$key][$field_name_fc2][$lang][0]['value']['#title'] = $title.'<div><span class="required-for-pub">*Required for content to be published.</span></div>';
      }
      $form[$field_name_fc][$lang][$key][$field_name_fc2][$lang][0]['value']['#attributes']['class'][] = 'required-for-pub'; 
    }
  }
}